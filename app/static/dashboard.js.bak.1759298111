function fmt(x){return x.toLocaleString('ru-RU',{minimumFractionDigits:2, maximumFractionDigits:2});}
function pct(a,b){if(!b) return 0; return (a/b*100-100);}
function cls(n){return n>=0?'good':'bad';}
const toISO=(d)=>d.toISOString().slice(0,10);
const parseISO=(s)=>{const [y,m,dd]=s.split('-').map(Number); return new Date(y, m-1, dd);};

function setPeriodCurrentMonth(){
  const now=new Date(); now.setHours(0,0,0,0);
  const start=new Date(now.getFullYear(), now.getMonth(), 1);
  const yesterday=new Date(now); yesterday.setDate(now.getDate()-1);
  // если сегодня 1 число, чтобы end не ушёл в прошлый месяц
  const end = (yesterday < start) ? start : yesterday;
  document.getElementById('start').value = toISO(start);
  document.getElementById('end').value   = toISO(end);
}
function setPeriodPrevMonth(){
  const now=new Date(); now.setHours(0,0,0,0);
  const firstThis=new Date(now.getFullYear(), now.getMonth(), 1);
  const lastPrev=new Date(firstThis-1); // день до 1-го текущего = конец прошлого месяца
  const firstPrev=new Date(lastPrev.getFullYear(), lastPrev.getMonth(), 1);
  firstPrev.setHours(0,0,0,0); lastPrev.setHours(0,0,0,0);
  document.getElementById('start').value = toISO(firstPrev);
  document.getElementById('end').value   = toISO(lastPrev);
}
function setPeriodYTD(){
  const now=new Date(); now.setHours(0,0,0,0);
  const start=new Date(now.getFullYear(),0,1);
  const yesterday=new Date(now); yesterday.setDate(now.getDate()-1);
  const end = (yesterday < start) ? start : yesterday;
  document.getElementById('start').value = toISO(start);
  document.getElementById('end').value   = toISO(end);
}
function setPeriodPrevYear(){
  const now=new Date();
  const start=new Date(now.getFullYear()-1,0,1);
  const end  =new Date(now.getFullYear()-1,11,31);
  start.setHours(0,0,0,0); end.setHours(0,0,0,0);
  document.getElementById('start').value = toISO(start);
  document.getElementById('end').value   = toISO(end);
}

async function loadChartsAndKPI(){
  const [rev, mar, inf] = await Promise.all([
    fetch('/api/revenue/daily?days=60',{credentials:'include'}).then(r=>r.json()),
    fetch('/api/margin/daily?days=60',{credentials:'include'}).then(r=>r.json()),
    fetch('/api/inflow/daily?days=60',{credentials:'include'}).then(r=>r.json()),
  ]);
  const revRows = rev.data||[], marRows = mar.data||[], infRows = inf.data||[];

  // KPI 7 дней
  const from7 = (()=>{const d=new Date(); d.setDate(d.getDate()-6); d.setHours(0,0,0,0); return toISO(d);})();
  const kRows = marRows.filter(r=>r.date>=from7);
  const kRev = kRows.reduce((s,r)=>s+(r.revenue||0),0);
  const kGP  = kRows.reduce((s,r)=>s+(r.gross_profit||0),0);
  const kChecks = (revRows.filter(r=>r.date>=from7)).reduce((s,r)=>s+(r.receipts||0),0);
  const kMargin = kRev ? (kGP/kRev*100) : 0;
  const kAT = kChecks ? (kRev/kChecks) : 0;
  document.getElementById('kpi-rev').textContent = fmt(kRev) + ' ₽';
  document.getElementById('kpi-gp').textContent = fmt(kGP) + ' ₽';
  document.getElementById('kpi-margin').textContent = kMargin.toFixed(1) + ' %';
  document.getElementById('kpi-at').textContent = fmt(kAT) + ' ₽';

  // Revenue chart
  const byWh = {}; for(const r of revRows){ (byWh[r.warehouse] ||= []).push(r); }
  const dates = [...new Set(revRows.map(r=>r.date))].sort();
  Plotly.newPlot('chart-revenue',
    Object.entries(byWh).map(([wh, arr])=>{
      const map = Object.fromEntries(arr.map(r=>[r.date, r.revenue]));
      return {x: dates, y: dates.map(d=> map[d] ?? 0), type:'scatter', mode:'lines+markers', name: wh};
    }),
    {paper_bgcolor:'#0b0c10', plot_bgcolor:'#0b0c10', xaxis:{gridcolor:'#222831', tickformat:'%Y-%m-%d'}, yaxis:{gridcolor:'#222831', title:'₽'}, margin:{t:10,r:10,b:40,l:60}},
    {displayModeBar:false, responsive:true}
  );

  // Margin chart
  const byWhM = {}; for(const r of marRows){ (byWhM[r.warehouse] ||= []).push(r); }
  const datesM = [...new Set(marRows.map(r=>r.date))].sort();
  const tracesM = [];
  for(const [wh, arr] of Object.entries(byWhM)){
    const mapGP = Object.fromEntries(arr.map(r=>[r.date, r.gross_profit]));
    const mapPct= Object.fromEntries(arr.map(r=>[r.date, r.margin_pct]));
    tracesM.push({x: datesM, y: datesM.map(d=> mapGP[d] ?? 0), type:'bar', name: wh + ' GP', opacity:0.75});
    tracesM.push({x: datesM, y: datesM.map(d=> mapPct[d] ?? 0), type:'scatter', mode:'lines', name: wh + ' %', yaxis:'y2'});
  }
  Plotly.newPlot('chart-margin', tracesM, {
    paper_bgcolor:'#0b0c10', plot_bgcolor:'#0b0c10',
    xaxis:{gridcolor:'#222831', tickformat:'%Y-%m-%d'},
    yaxis:{gridcolor:'#222831', title:'Валовая прибыль ₽'},
    yaxis2:{gridcolor:'#222831', title:'Маржа %', overlaying:'y', side:'right'},
    barmode:'group', margin:{t:10,r:60,b:40,l:60}
  }, {displayModeBar:false, responsive:true});

  // Inflow chart
  const byWhI = {}; for(const r of infRows){ (byWhI[r.warehouse] ||= []).push(r); }
  const datesI = [...new Set(infRows.map(r=>r.date))].sort();
  Plotly.newPlot('chart-inflow',
    Object.entries(byWhI).map(([wh, arr])=>{
      const map = Object.fromEntries(arr.map(r=>[r.date, r.inflow]));
      return {x: datesI, y: datesI.map(d=> map[d] ?? 0), type:'bar', name: wh};
    }), {
      paper_bgcolor:'#0b0c10', plot_bgcolor:'#0b0c10',
      xaxis:{gridcolor:'#222831', tickformat:'%Y-%m-%d'},
      yaxis:{gridcolor:'#222831', title:'Оприходования ₽'},
      barmode:'group', margin:{t:10,r:10,b:40,l:60}
    }, {displayModeBar:false, responsive:true}
  );
}

// ---- summary helpers ----
async function fetchSummarySeries(start, end, wh){
  const url = new URL('/api/summary', location.origin);
  url.searchParams.set('start', start);
  url.searchParams.set('end', end);
  url.searchParams.set('group', 'day');
  if(wh) url.searchParams.set('warehouse_id', wh);
  const res = await fetch(url, {credentials:'include'});
  if(!res.ok) throw new Error('summary failed');
  const data = await res.json();
  const series = data.series || [];
  return series.map(r=>({date: r.period, revenue: r.revenue || 0}));
}
function rangeDays(startISO,endISO){ const s=parseISO(startISO), e=parseISO(endISO); const days=[]; let d=new Date(s); while(d<=e){ d.setHours(0,0,0,0); days.push(toISO(d)); d.setDate(d.getDate()+1);} return days; }
function shiftOneDay(iso,delta){ const d=parseISO(iso); d.setDate(d.getDate()+delta); d.setHours(0,0,0,0); return toISO(d); }
function prevPeriodRange(startISO,endISO){ const len=rangeDays(startISO,endISO).length; const prevEnd=shiftOneDay(startISO,-1); const prevStart=shiftOneDay(prevEnd,-(len-1)); return {start:prevStart,end:prevEnd}; }
function prevYearRange(startISO,endISO){ const s=parseISO(startISO), e=parseISO(endISO); const s2=new Date(s.getFullYear()-1, s.getMonth(), s.getDate()); const e2=new Date(e.getFullYear()-1, e.getMonth(), e.getDate()); s2.setHours(0,0,0,0); e2.setHours(0,0,0,0); return {start:toISO(s2), end:toISO(e2)}; }

// ---- comparative chart ----
async function loadCompareChart(){
  const start=document.getElementById('start').value;
  const end=document.getElementById('end').value;
  const wh=document.getElementById('warehouse').value;
  const doPrev=document.getElementById('cmp-prev-period').checked;
  const doYoY=document.getElementById('cmp-prev-year').checked;

  const days=rangeDays(start,end);
  const nowSeries=await fetchSummarySeries(start,end,wh);
  const nowMap=Object.fromEntries(nowSeries.map(r=>[r.date,r.revenue]));
  const x=days.map((_,i)=>i+1);
  const nowY=days.map(d=>nowMap[d]??0);

  const traces=[{x,y:nowY,type:'scatter',mode:'lines+markers',name:'Текущий период'}];

  if(doPrev){
    const pp=prevPeriodRange(start,end);
    const prevSeries=await fetchSummarySeries(pp.start,pp.end,wh);
    const prevMap=Object.fromEntries(prevSeries.map(r=>[r.date,r.revenue]));
    const prevDays=rangeDays(pp.start,pp.end);
    const prevY=prevDays.map(d=>prevMap[d]??0);
    traces.push({x,y:prevY,type:'scatter',mode:'lines',name:'Пред. период',line:{dash:'dot'}});
  }
  if(doYoY){
    const yy=prevYearRange(start,end);
    const yoySeries=await fetchSummarySeries(yy.start,yy.end,wh);
    const yoyMap=Object.fromEntries(yoySeries.map(r=>[r.date,r.revenue]));
    const yoyDays=rangeDays(yy.start,yy.end);
    const yoyY=yoyDays.map(d=>yoyMap[d]??0);
    traces.push({x,y:yoyY,type:'scatter',mode:'lines',name:'Год назад',line:{dash:'dash'}});
  }

  Plotly.newPlot('chart-compare', traces, {
    paper_bgcolor:'#0b0c10', plot_bgcolor:'#0b0c10',
    xaxis:{gridcolor:'#222831', title:'День периода', dtick:1, rangemode:'tozero'},
    yaxis:{gridcolor:'#222831', title:'Выручка ₽'},
    margin:{t:10,r:10,b:40,l:60}, legend:{orientation:'h'}
  }, {displayModeBar:false, responsive:true});
}

// ---- tables & comparison ----
async function loadWarehouses(){
  const res=await fetch('/api/warehouses',{credentials:'include'});
  const json=await res.json();
  const sel=document.getElementById('warehouse');
  for(const w of (json.data||[])){ const opt=document.createElement('option'); opt.value=w.id; opt.textContent=w.name; sel.appendChild(opt); }
}
async function loadTopWarehouses(start,end){
  const res=await fetch(`/api/top/warehouses?start=${start}&end=${end}`,{credentials:'include'});
  const data=await res.json(); const rows=data.data||[];
  let html='<table><thead><tr><th>Склад</th><th>Выручка</th><th>GP</th><th>Маржа</th><th>Чеки</th><th>Ср. чек</th></tr></thead><tbody>';
  for(const r of rows){ html+=`<tr><td>${r.warehouse}</td><td>${fmt(r.revenue)} ₽</td><td>${fmt(r.gross_profit)} ₽</td><td>${(r.margin_pct||0).toFixed(1)} %</td><td>${(r.checks||0).toFixed(0)}</td><td>${fmt(r.avg_ticket||0)} ₽</td></tr>`; }
  html+='</tbody></table>'; document.getElementById('top-warehouses').innerHTML=html;
}
async function loadTopProducts(start,end,wh){
  const url=new URL('/api/top/products',location.origin); url.searchParams.set('start',start); url.searchParams.set('end',end); if(wh) url.searchParams.set('warehouse_id',wh);
  const res=await fetch(url,{credentials:'include'}); if(!res.ok){ document.getElementById('top-products').innerHTML='<div class="muted">Ошибка загрузки</div>'; return; }
  const data=await res.json(); const rows=data.data||[];
  let html='<table><thead><tr><th>Товар</th><th>Выручка</th><th>GP</th><th>Маржа</th><th>Кол-во</th><th>Ср. цена</th></tr></thead><tbody>';
  for(const r of rows){ html+=`<tr><td>${r.name}</td><td>${fmt(r.revenue)} ₽</td><td>${fmt(r.gross_profit)} ₽</td><td>${(r.margin_pct||0).toFixed(1)} %</td><td>${(r.qty||0).toFixed(0)}</td><td>${fmt(r.avg_price||0)} ₽</td></tr>`; }
  html+='</tbody></table>'; document.getElementById('top-products').innerHTML=html;
}
async function loadComparison(){
  const start=document.getElementById('start').value;
  const end=document.getElementById('end').value;
  const group=document.getElementById('group').value;

  // summary totals/compare для базовых метрик
  const url=new URL('/api/summary',location.origin);
  url.searchParams.set('start',start); url.searchParams.set('end',end); url.searchParams.set('group',group);
  const data=await jget(url.toString()); const t=data.totals||{}; const c=data.compare||{}; const prev=c.previous||{}, yoy=c.previous_year||{};
  const kpi=(r)=>({ rev:r.revenue||0, gp:(r.revenue||0)-(r.cost||0), mar:(r.revenue?(((r.revenue-(r.cost||0))/r.revenue*100)):0), at:(r.receipts?(r.revenue/r.receipts):0), chk:(r.receipts||0), });
  const cur=kpi(t), p=kpi(prev), y=kpi(yoy);

  // подпись
  document.getElementById('compare').textContent=`Период ${start} – ${end} • Группировка: ${group}`;

  // подтянем списания для текущего периода, чтобы добавить строки в метрику
  let woDef=0, woInv=0, woOther=0;
  try{
    const u = new URL('/api/writeoff/reasons', location.origin);
    u.searchParams.set('start',start); u.searchParams.set('end',end);
    const wr = await jget(u.toString());
    for(const r of (wr.data||[])){
      const v=+r.cost||0; const reason=(r.reason||'').toLowerCase();
      if(reason.includes('брак')) woDef += v;
      else if(reason.includes('интвен') || reason.includes('инвент') || reason.includes('интвент')) woInv += v;
      else woOther += v;
    }
  }catch(e){ console.warn('writeoff in metrics failed', e); }
  const woTotal = woDef + woInv + woOther;
  const pctOfRev = (x)=> cur.rev ? (x/cur.rev*100) : 0;

  // таблица метрик
  const rows=[ 
    ['Выручка',cur.rev,p.rev,pct(cur.rev,p.rev),y.rev,pct(cur.rev,y.rev)],
    ['Валовая прибыль',cur.gp,p.gp,pct(cur.gp,p.gp),y.gp,pct(cur.gp,y.gp)],
    ['Маржа %',cur.mar,p.mar,cur.mar-p.mar,y.mar,cur.mar-y.mar],
    ['Средний чек',cur.at,p.at,pct(cur.at,p.at),y.at,pct(cur.at,y.at)],
    ['Количество чеков',cur.chk,p.chk,pct(cur.chk,p.chk),y.chk,pct(cur.chk,y.chk)],
    // новые строки по списаниям (только текущий период; сравнения ставим —)
    ['Списания (всего)', woTotal, null, NaN, null, NaN, pctOfRev(woTotal)],
    ['— Брак', woDef, null, NaN, null, NaN, pctOfRev(woDef)],
    ['— Инвентаризация', woInv, null, NaN, null, NaN, pctOfRev(woInv)],
  ];

  let html='<table><thead><tr><th>Метрика</th><th>Текущий</th><th>Предыдущий</th><th>Δ к пред.</th><th>Год назад</th><th>Δ к прошл. году</th><th>% от выручки</th></tr></thead><tbody>';
  for(const r of rows){
    const name=r[0], curv=r[1], pv=r[2], d1=r[3], yv=r[4], d2=r[5], prc=r[6];
    const isPctRow = (name==='Маржа %');
    const curFmt = isPctRow? (curv??0).toFixed(1)+' %' : (name==='Количество чеков'? (curv||0).toFixed(0) : fmt(curv||0)+' ₽');
    const pFmt   = (pv==null && name.startsWith('Списания'))? '—' : (isPctRow? (pv||0).toFixed(1)+' %' : (name==='Количество чеков'? (pv||0).toFixed(0) : fmt(pv||0)+' ₽'));
    const yFmt   = (yv==null && name.startsWith('Списания'))? '—' : (isPctRow? (yv||0).toFixed(1)+' %' : (name==='Количество чеков'? (yv||0).toFixed(0) : fmt(yv||0)+' ₽'));
    const d1fmt  = (Number.isFinite(d1)? (isPctRow? d1.toFixed(1)+' п.п.': d1.toFixed(1)+' %') : '—');
    const d2fmt  = (Number.isFinite(d2)? (isPctRow? d2.toFixed(1)+' п.п.': d2.toFixed(1)+' %') : '—');
    const d1cls  = Number.isFinite(d1)? cls(d1):'';
    const d2cls  = Number.isFinite(d2)? cls(d2):'';
    const prcFmt = (name.startsWith('Списания'))? (prc||0).toFixed(2)+' %' : '';
    html+=`<tr><td>${name}</td><td>${curFmt}</td><td>${pFmt}</td><td class="${d1cls}">${d1fmt}</td><td>${yFmt}</td><td class="${d2cls}">${d2fmt}</td><td>${prcFmt}</td></tr>`;
  }
  html+='</tbody></table>'; document.getElementById('compare-table').innerHTML=html;

  await Promise.all([loadTopWarehouses(start,end), loadTopProducts(start,end)]);
  document.getElementById('tp-scope').textContent='по всем складам';

  await loadCompareChart();
  await loadWriteoffBlock();
}
  const data=await res.json(); const t=data.totals||{}; const c=data.compare||{}; const prev=c.previous||{}, yoy=c.previous_year||{};
  const kpi=(r)=>({ rev:r.revenue||0, gp:(r.revenue||0)-(r.cost||0), mar:(r.revenue?(((r.revenue-(r.cost||0))/r.revenue*100)):0), at:(r.receipts?(r.revenue/r.receipts):0), chk:(r.receipts||0), });
  const cur=kpi(t), p=kpi(prev), y=kpi(yoy);
  document.getElementById('compare').textContent=`Период ${start} – ${end}${wh? ' • Склад ID '+wh : ''} • Группировка: ${group}`;
  const rows=[ ['Выручка',cur.rev,p.rev,pct(cur.rev,p.rev),y.rev,pct(cur.rev,y.rev)],
               ['Валовая прибыль',cur.gp,p.gp,pct(cur.gp,p.gp),y.gp,pct(cur.gp,y.gp)],
               ['Маржа %',cur.mar,p.mar,cur.mar-p.mar,y.mar,cur.mar-y.mar],
               ['Средний чек',cur.at,p.at,pct(cur.at,p.at),y.at,pct(cur.at,y.at)],
               ['Количество чеков',cur.chk,p.chk,pct(cur.chk,p.chk),y.chk,pct(cur.chk,y.chk)], ];
  let html='<table><thead><tr><th>Метрика</th><th>Текущий</th><th>Предыдущий</th><th>Δ к пред.</th><th>Год назад</th><th>Δ к прошл. году</th></tr></thead><tbody>';
  for(const r of rows){
    const [name,curv,pv,d1,yv,d2]=r, d1c=cls(d1), d2c=cls(d2);
    const curFmt = name==='Маржа %'? curv.toFixed(1)+' %' : (name==='Количество чеков'? (curv||0).toFixed(0) : fmt(curv)+(name==='Средний чек'?' ₽':' ₽'));
    const pFmt   = name==='Маржа %'? (pv||0).toFixed(1)+' %' : (name==='Количество чеков'? (pv||0).toFixed(0) : fmt(pv||0)+(name==='Средний чек'?' ₽':' ₽'));
    const yFmt   = name==='Маржа %'? (yv||0).toFixed(1)+' %' : (name==='Количество чеков'? (yv||0).toFixed(0) : fmt(yv||0)+(name==='Средний чек'?' ₽':' ₽'));
    const d1Fmt  = name==='Маржа %'? (d1||0).toFixed(1)+' п.п.' : (isFinite(d1)? d1.toFixed(1)+' %':'—');
    const d2Fmt  = name==='Маржа %'? (d2||0).toFixed(1)+' п.п.' : (isFinite(d2)? d2.toFixed(1)+' %':'—');
    html+=`<tr><td>${name}</td><td>${curFmt}</td><td>${pFmt}</td><td class="${d1c}">${d1Fmt}</td><td>${yFmt}</td><td class="${d2c}">${d2Fmt}</td></tr>`;
  }
  html+='</tbody></table>'; document.getElementById('compare-table').innerHTML=html;

  await Promise.all([loadTopWarehouses(start,end), loadTopProducts(start,end,wh)]);
  document.getElementById('tp-scope').textContent=wh?('склад ID '+wh):'по всем складам';

  await loadCompareChart();
await loadWriteoffBlock();
}
function wireQuickButtons(){
  document.getElementById('btn-cur-month').addEventListener('click', ()=>{ setPeriodCurrentMonth(); loadComparison(); });
  document.getElementById('btn-prev-month').addEventListener('click', ()=>{ setPeriodPrevMonth(); loadComparison(); });
  document.getElementById('btn-ytd').addEventListener('click', ()=>{ setPeriodYTD(); loadComparison(); });
  document.getElementById('btn-prev-year').addEventListener('click', ()=>{ setPeriodPrevYear(); loadComparison(); });
  document.getElementById('cmp-prev-period').addEventListener('change', loadCompareChart);
  document.getElementById('cmp-prev-year').addEventListener('change', loadCompareChart);
}
async function loadWarehouses(){ const res=await fetch('/api/warehouses',{credentials:'include'}); const json=await res.json(); const sel=document.getElementById('warehouse'); for(const w of (json.data||[])){ const opt=document.createElement('option'); opt.value=w.id; opt.textContent=w.name; sel.appendChild(opt);} }
async function boot(){ setPeriodCurrentMonth(); await loadWarehouses(); await loadChartsAndKPI(); wireQuickButtons(); await loadComparison(); document.getElementById('apply').addEventListener('click', loadComparison); }
document.addEventListener('DOMContentLoaded', boot);


// ====== Writeoff (списания) ======
async function jget(url){ const r=await fetch(url,{credentials:'include'}); if(!r.ok) throw new Error(url+' failed'); return r.json(); }

async function loadWriteoffBlock(){
  const start=document.getElementById('start').value;
  const end=document.getElementById('end').value;

  // daily
  const u1 = new URL('/api/writeoff/daily', location.origin);
  u1.searchParams.set('start', start); u1.searchParams.set('end', end);
  const res1 = await jget(u1.toString());
  const rows = res1.data||[];

  // reasons
  const u2 = new URL('/api/writeoff/reasons', location.origin);
  u2.searchParams.set('start', start); u2.searchParams.set('end', end);
  const res2 = await jget(u2.toString());
  const reasons = res2.data||[];

  // summary выручка периода
  const u3 = new URL('/api/summary', location.origin);
  u3.searchParams.set('start', start); u3.searchParams.set('end', end);
  u3.searchParams.set('group', 'day');
  const sum = await jget(u3.toString());
  const revenueTotal = (sum.totals && sum.totals.revenue) ? sum.totals.revenue : 0;

  // выручка по складам за период
  const u4 = new URL('/api/top/warehouses', location.origin);
  u4.searchParams.set('start', start); u4.searchParams.set('end', end); u4.searchParams.set('limit', '100');
  const topw = await jget(u4.toString());
  const byWarehouseRevenue = {};
  for(const r of (topw.data||[])){ byWarehouseRevenue[r.warehouse] = r.revenue || 0; }

  // каркасы (как раньше)
  if(!document.getElementById('chart-writeoff')){
    const c1=document.createElement('div'); c1.className='card col-12';
    c1.innerHTML = '<div class="muted">Списания по дням (₽) — total/defect/inventory/other</div><div id="chart-writeoff" style="height:380px"></div>';
    document.querySelector('.grid').appendChild(c1);
  }
  if(!document.getElementById('writeoff-reasons')){
    const c2=document.createElement('div'); c2.className='card col-12';
    c2.innerHTML = '<div class="muted">Списания — режимы: Документы / Итоги / По складам</div><div id="writeoff-reasons"></div>';
    document.querySelector('.grid').appendChild(c2);
  }

  // таблица по активному режиму
  const ctx = { reasons, rowsDaily: rows, revenueTotal, byWarehouseRevenue };
  window.__renderWriteoff = ()=>renderWriteoffTable(ctx);
  renderWriteoffTable(ctx);

  // график по дням
  const byDate = {};
  for(const r of rows){
    const d=r.date;
    const obj = (byDate[d] ||= {total:0, defect:0, inventory:0, other:0});
    obj.total += r.total||0; obj.defect += r.defect||0; obj.inventory += r.inventory||0; obj.other += r.other||0;
  }
  const dates = Object.keys(byDate).sort();
  const arr = key => dates.map(x=> (byDate[x][key]||0));
  const traces=[
    {x:dates, y:arr('total'), type:'scatter', mode:'lines+markers', name:'total'},
    {x:dates, y:arr('defect'), type:'bar', name:'defect', opacity:0.7},
    {x:dates, y:arr('inventory'), type:'bar', name:'inventory', opacity:0.7},
    {x:dates, y:arr('other'), type:'bar', name:'other', opacity:0.7},
  ];
  Plotly.newPlot('chart-writeoff', traces, {
    paper_bgcolor:'#0b0c10', plot_bgcolor:'#0b0c10',
    xaxis:{gridcolor:'#222831', tickformat:'%Y-%m-%d'},
    yaxis:{gridcolor:'#222831', title:'₽'},
    barmode:'group', margin:{t:10,r:10,b:40,l:60}
  }, {displayModeBar:false, responsive:true});
}
  if(!document.getElementById('writeoff-reasons')){
    const c2=document.createElement('div'); c2.className='card col-12';
    c2.innerHTML = '<div class="muted">Списания по причинам (за период)</div><div id="writeoff-reasons"></div>';
    document.querySelector('.grid').appendChild(c2);
  }

  // таблица причин
  let html='<table><thead><tr><th>Дата</th><th>Склад</th><th>Причина</th><th>Сумма</th></tr></thead><tbody>';
  for(const r of reasons){ html += `<tr><td>${r.date}</td><td>${r.warehouse||r.warehouse_id||''}</td><td>${r.reason||''}</td><td>${fmt(r.cost||0)} ₽</td></tr>`; }
  html+='</tbody></table>';
  document.getElementById('writeoff-reasons').innerHTML=html;

  // график по дням
  const byDate = {};
  for(const r of rows){
    const d=r.date;
    const obj = (byDate[d] ||= {total:0, defect:0, inventory:0, other:0});
    obj.total += r.total||0; obj.defect += r.defect||0; obj.inventory += r.inventory||0; obj.other += r.other||0;
  }
  const dates = Object.keys(byDate).sort();
  const arr = key => dates.map(x=> (byDate[x][key]||0));
  const traces=[
    {x:dates, y:arr('total'), type:'scatter', mode:'lines+markers', name:'total'},
    {x:dates, y:arr('defect'), type:'bar', name:'defect', opacity:0.7},
    {x:dates, y:arr('inventory'), type:'bar', name:'inventory', opacity:0.7},
    {x:dates, y:arr('other'), type:'bar', name:'other', opacity:0.7},
  ];
  Plotly.newPlot('chart-writeoff', traces, {
    paper_bgcolor:'#0b0c10', plot_bgcolor:'#0b0c10',
    xaxis:{gridcolor:'#222831', tickformat:'%Y-%m-%d'},
    yaxis:{gridcolor:'#222831', title:'₽'},
    barmode:'group', margin:{t:10,r:10,b:40,l:60}
  }, {displayModeBar:false, responsive:true});
}

// ===== Writeoff UI state =====
let writeoffMode = 'docs'; // 'docs' | 'totals' | 'bywh'

// Подсобка: кнопки режимов над таблицей
function ensureWriteoffHeader(){
  let hdr = document.getElementById('writeoff-header');
  if(hdr) return hdr;
  const wrap = document.createElement('div');
  wrap.id='writeoff-header';
  wrap.style.display='flex'; wrap.style.gap='8px'; wrap.style.margin='8px 0 10px 0';
  wrap.innerHTML = `
    <button id="wo-btn-docs" class="btn">Документы</button>
    <button id="wo-btn-totals" class="btn">Итого (период)</button>
    <button id="wo-btn-bywh" class="btn">По складам</button>
    <span class="muted" style="margin-left:8px">Совет: для корректных процентов берём выручку периода.</span>
  `;
  const tgt = document.getElementById('writeoff-reasons');
  tgt.parentElement.insertBefore(wrap, tgt);
  const bind=(id,mode)=>document.getElementById(id).addEventListener('click',()=>{writeoffMode=mode; window.__renderWriteoff && window.__renderWriteoff();});
  bind('wo-btn-docs','docs'); bind('wo-btn-totals','totals'); bind('wo-btn-bywh','bywh');
  return wrap;
}

// Рендер таблицы с учётом режима
function renderWriteoffTable(ctx){
  // ctx: { reasons[], rowsDaily[], revenueTotal, byWarehouseRevenue{} }
  const mount = document.getElementById('writeoff-reasons');
  if(!mount) return;
  // кнопки-режимы
  ensureWriteoffHeader();

  if(writeoffMode==='docs'){
    let html='<table><thead><tr><th>Дата</th><th>Склад</th><th>Причина</th><th>Сумма</th></tr></thead><tbody>';
    for(const r of ctx.reasons){ html += `<tr><td>${r.date}</td><td>${r.warehouse||r.warehouse_id||''}</td><td>${r.reason||''}</td><td>${fmt(r.cost||0)} ₽</td></tr>`; }
    html+='</tbody></table>';
    mount.innerHTML=html;
    return;
  }

  if(writeoffMode==='totals'){
    // агрегаты за период по причинам + общий итог и % от выручки
    let sumDef=0, sumInv=0, sumOther=0;
    for(const r of ctx.reasons){
      const reason=(r.reason||'').toLowerCase();
      const v = +r.cost || 0;
      if(reason.includes('брак')) sumDef += v;
      else if(reason.includes('интвен') || reason.includes('инвент') || reason.includes('интвент')) sumInv += v;
      else sumOther += v;
    }
    const total = sumDef + sumInv + sumOther;
    const rev = ctx.revenueTotal || 0;
    const pct = (x)=> rev ? (x/rev*100) : 0;

    let html='<table><thead><tr><th>Показатель</th><th>Сумма</th><th>% от выручки</th></tr></thead><tbody>';
    html+=`<tr><td>Списания (всего)</td><td>${fmt(total)} ₽</td><td>${pct(total).toFixed(2)} %</td></tr>`;
    html+=`<tr><td>— Брак</td><td>${fmt(sumDef)} ₽</td><td>${pct(sumDef).toFixed(2)} %</td></tr>`;
    html+=`<tr><td>— Инвентаризация</td><td>${fmt(sumInv)} ₽</td><td>${pct(sumInv).toFixed(2)} %</td></tr>`;
    if(sumOther>0) html+=`<tr><td>— Прочее</td><td>${fmt(sumOther)} ₽</td><td>${pct(sumOther).toFixed(2)} %</td></tr>`;
    html+='</tbody></table>';
    mount.innerHTML=html;
    return;
  }

  if(writeoffMode==='bywh'){
    // агрегаты по складам (брак/инв/проч) + % от выручки склада
    const byWh = {};
    for(const r of ctx.reasons){
      const wh = r.warehouse || r.warehouse_id || '—';
      const reason=(r.reason||'').toLowerCase();
      const v=+r.cost||0;
      const obj = (byWh[wh] ||= {def:0, inv:0, other:0});
      if(reason.includes('брак')) obj.def += v;
      else if(reason.includes('интвен') || reason.includes('инвент') || reason.includes('интвент')) obj.inv += v;
      else obj.other += v;
    }
    const whNames = Object.keys(byWh).sort();
    let html='<table><thead><tr><th>Склад</th><th>Всего</th><th>Брак</th><th>Инвент.</th><th>Прочее</th><th>% от выручки склада</th></tr></thead><tbody>';
    for(const wh of whNames){
      const o=byWh[wh], sum=o.def+o.inv+o.other;
      const whRev = ctx.byWarehouseRevenue[wh] || 0;
      const pct = whRev ? (sum/whRev*100) : 0;
      html+=`<tr><td>${wh}</td><td>${fmt(sum)} ₽</td><td>${fmt(o.def)} ₽</td><td>${fmt(o.inv)} ₽</td><td>${fmt(o.other)} ₽</td><td>${pct.toFixed(2)} %</td></tr>`;
    }
    html+='</tbody></table>';
    mount.innerHTML=html;
    return;
  }
}

// Сохраняем для кнопок
window.__renderWriteoff = ()=>{};
