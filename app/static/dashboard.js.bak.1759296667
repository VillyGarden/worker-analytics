// Worker Analytics Dashboard — v9 (writeoff + inflow in metrics, multi-warehouse)

function fmt(x){return (x??0).toLocaleString('ru-RU',{minimumFractionDigits:2, maximumFractionDigits:2});}
function pctDelta(a,b){ if(!isFinite(a)||!isFinite(b)||b===0) return NaN; return (a/b*100-100); }
function cls(n){ return isFinite(n) ? (n>=0?'good':'bad') : ''; }
function toISO(d){ const z=new Date(d); z.setHours(0,0,0,0); return `${z.getFullYear()}-${String(z.getMonth()+1).padStart(2,'0')}-${String(z.getDate()).padStart(2,'0')}`; }
const parseISO=(s)=>{ const [y,m,dd]=s.split('-').map(Number); const d=new Date(y, m-1, dd); d.setHours(0,0,0,0); return d; };
function lastDayOfMonth(y,m){ return new Date(y, m+1, 0); }
function debounced(fn,ms=250){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a),ms); }; }
async function jget(url){ const r=await fetch(url,{credentials:'include'}); if(!r.ok) throw new Error(url+' -> '+r.status); return r.json(); }
function by(arr,key){ const m={}; for(const r of arr){ const k=r[key]; (m[k] ||= []).push(r); } return m; }

function setPeriodCurrentMonth(){
  const now=new Date();
  const start=new Date(now.getFullYear(), now.getMonth(), 1);
  const end=lastDayOfMonth(now.getFullYear(), now.getMonth());
  start.setHours(0,0,0,0); end.setHours(0,0,0,0);
  document.getElementById('start').value=toISO(start);
  document.getElementById('end').value=toISO(end);
}
function setPeriodPrevMonth(){
  const now=new Date();
  const prevFirst=new Date(now.getFullYear(), now.getMonth()-1, 1);
  const prevLast=lastDayOfMonth(prevFirst.getFullYear(), prevFirst.getMonth());
  prevFirst.setHours(0,0,0,0); prevLast.setHours(0,0,0,0);
  document.getElementById('start').value=toISO(prevFirst);
  document.getElementById('end').value=toISO(prevLast);
}
function setPeriodYTD(){ // до вчера
  const now=new Date();
  const start=new Date(now.getFullYear(),0,1);
  const end=new Date(now); end.setDate(end.getDate()-1);
  start.setHours(0,0,0,0); end.setHours(0,0,0,0);
  document.getElementById('start').value=toISO(start);
  document.getElementById('end').value=toISO(end);
}
function setPeriodPrevYear(){
  const y=(new Date()).getFullYear()-1;
  const start=new Date(y,0,1), end=new Date(y,11,31);
  start.setHours(0,0,0,0); end.setHours(0,0,0,0);
  document.getElementById('start').value=toISO(start);
  document.getElementById('end').value=toISO(end);
}

function rangeDays(startISO,endISO){
  const s=parseISO(startISO), e=parseISO(endISO);
  const days=[]; let d=new Date(s);
  while(d<=e){ days.push(toISO(d)); d.setDate(d.getDate()+1); }
  return days;
}
function prevPeriodRange(startISO,endISO){
  const len=rangeDays(startISO,endISO).length;
  const s=parseISO(startISO);
  const prevEnd=new Date(s); prevEnd.setDate(prevEnd.getDate()-1);
  const prevStart=new Date(prevEnd); prevStart.setDate(prevStart.getDate()-(len-1));
  return {start:toISO(prevStart),end:toISO(prevEnd)};
}
function prevYearRange(startISO,endISO){
  const s=parseISO(startISO), e=parseISO(endISO);
  const s2=new Date(s.getFullYear()-1,s.getMonth(),s.getDate());
  const e2=new Date(e.getFullYear()-1,e.getMonth(),e.getDate());
  s2.setHours(0,0,0,0); e2.setHours(0,0,0,0);
  return {start:toISO(s2),end:toISO(e2)};
}

window.__WAREHOUSES__=[];
function getSelectedWarehouseIds(){
  // Читаем все чекбоксы с name="wh[]"
  const boxes=document.querySelectorAll('input[name="wh[]"]:checked');
  const ids=[...boxes].map(b=>b.value);
  // если ни одного не выбрано — трактуем как «все»
  if(ids.length===0) return (window.__WAREHOUSES__||[]).map(w=>String(w.id));
  return ids;
}
function findWarehouseNameById(id){
  const w=(window.__WAREHOUSES__||[]).find(x=>String(x.id)===String(id));
  return w?.name;
}


async function loadWarehouses(){
  try{
    const res = await jget('/api/warehouses');
    const warehouses = res.data || [];
    // если селект существует — скроем его, чтобы не путал
    const sel = document.getElementById('warehouse');
    if(sel){ sel.style.display='none'; }
    // панель чекбоксов
    if(!document.getElementById('wh-multi')){
      const anchor = sel ? sel : document.getElementById('group'); // вставим рядом
      const wrap = document.createElement('div');
      wrap.id = 'wh-multi';
      wrap.style.margin='8px 0 12px 0';
      wrap.innerHTML = '<div class="muted" style="margin-bottom:6px">Склады (пусто = все):</div><div id="wh-multi-box" style="display:flex;gap:12px;flex-wrap:wrap"></div>';
      anchor.parentElement.insertBefore(wrap, anchor.nextSibling);
      const box = wrap.querySelector('#wh-multi-box');
      for(const w of warehouses){
        const label = document.createElement('label'); label.style.userSelect='none';
        label.innerHTML = `<input type="checkbox" name="wh[]" value="${w.id}"> ${w.name}`;
        box.appendChild(label);
      }
      box.addEventListener('change', debounced(()=>loadComparison(), 200));
    }
  }catch(e){ console.error('warehouses load failed', e); }
}
    // панель чекбоксов
    if(!document.getElementById('wh-multi')){
      const anchor = sel ? sel : document.getElementById('group'); // вставим рядом
      const wrap = document.createElement('div');
      wrap.id = 'wh-multi';
      wrap.style.margin='8px 0 12px 0';
      wrap.innerHTML = '<div class="muted" style="margin-bottom:6px">Склады (пусто = все):</div><div id="wh-multi-box" style="display:flex;gap:12px;flex-wrap:wrap"></div>';
      anchor.parentElement.insertBefore(wrap, anchor.nextSibling);
      const box = wrap.querySelector('#wh-multi-box');
      for(const w of warehouses){
        const label = document.createElement('label'); label.style.userSelect='none';
        label.innerHTML = `<input type="checkbox" name="wh[]" value="${w.id}"> ${w.name}`;
        box.appendChild(label);
      }
      box.addEventListener('change', debounced(()=>loadComparison(), 200));
    }
  }catch(e){ console.error('warehouses load failed', e); }
}
      // реагируем на изменения чекбоксов
      box.addEventListener('change', debounced(()=>loadComparison(), 250));
    }
  }catch(e){
    console.error('warehouses load failed', e);
  }
}
      html+='</div>';
      card.innerHTML=html;
      grid.insertBefore(card, grid.firstChild);
      card.addEventListener('change', debounced(()=>loadComparison()));
    }
  }catch(e){ console.error('warehouses load failed', e); }
}

async function loadChartsAndKPI(){
  const [rev, mar, inf] = await Promise.all([
    jget('/api/revenue/daily?days=60'),
    jget('/api/margin/daily?days=60'),
    jget('/api/inflow/daily?days=60'),
  ]);
  const revRows = rev.data||[], marRows = mar.data||[], infRows = inf.data||[];

  const from7 = (()=>{const d=new Date(); d.setDate(d.getDate()-6); d.setHours(0,0,0,0); return toISO(d);})();
  const kRows = marRows.filter(r=>r.date>=from7);
  const kRev = kRows.reduce((s,r)=>s+(r.revenue||0),0);
  const kGP  = kRows.reduce((s,r)=>s+(r.gross_profit||0),0);
  const kChecks = (revRows.filter(r=>r.date>=from7)).reduce((s,r)=>s+(r.receipts||0),0);
  const kMargin = kRev ? (kGP/kRev*100) : 0;
  const kAT = kChecks ? (kRev/kChecks) : 0;
  const set=(id,txt)=>{ const el=document.getElementById(id); if(el) el.textContent=txt; };
  set('kpi-rev', fmt(kRev)+' ₽'); set('kpi-gp', fmt(kGP)+' ₽'); set('kpi-margin', kMargin.toFixed(1)+' %'); set('kpi-at', fmt(kAT)+' ₽');

  if(window.Plotly){
    const byWh = by(revRows,'warehouse'); const dates=[...new Set(revRows.map(r=>r.date))].sort();
    Plotly.newPlot('chart-revenue',
      Object.entries(byWh).map(([wh, arr])=>{
        const map=Object.fromEntries(arr.map(r=>[r.date,r.revenue]));
        return {x:dates,y:dates.map(d=>map[d]??0),type:'scatter',mode:'lines+markers',name:wh};
      }),
      {paper_bgcolor:'#0b0c10',plot_bgcolor:'#0b0c10',xaxis:{gridcolor:'#222831',tickformat:'%Y-%m-%d'},yaxis:{gridcolor:'#222831',title:'₽'},margin:{t:10,r:10,b:40,l:60}},
      {displayModeBar:false,responsive:true}
    );

    const byWhM = by(marRows,'warehouse'); const datesM=[...new Set(marRows.map(r=>r.date))].sort();
    const tracesM=[];
    for(const [wh, arr] of Object.entries(byWhM)){
      const gp=Object.fromEntries(arr.map(r=>[r.date,r.gross_profit]));
      const mp=Object.fromEntries(arr.map(r=>[r.date,r.margin_pct]));
      tracesM.push({x:datesM,y:datesM.map(d=>gp[d]??0),type:'bar',name:wh+' GP',opacity:0.75});
      tracesM.push({x:datesM,y:datesM.map(d=>mp[d]??0),type:'scatter',mode:'lines',name:wh+' %',yaxis:'y2'});
    }
    Plotly.newPlot('chart-margin', tracesM, {
      paper_bgcolor:'#0b0c10',plot_bgcolor:'#0b0c10',xaxis:{gridcolor:'#222831',tickformat:'%Y-%m-%d'},
      yaxis:{gridcolor:'#222831',title:'Валовая прибыль ₽'},
      yaxis2:{gridcolor:'#222831',title:'Маржа %',overlaying:'y',side:'right'},
      barmode:'group',margin:{t:10,r:60,b:40,l:60}
    }, {displayModeBar:false,responsive:true});

    const byWhI = by(infRows,'warehouse'); const datesI=[...new Set(infRows.map(r=>r.date))].sort();
    Plotly.newPlot('chart-inflow',
      Object.entries(byWhI).map(([wh, arr])=>{
        const map=Object.fromEntries(arr.map(r=>[r.date,r.inflow]));
        return {x:datesI,y:datesI.map(d=>map[d]??0),type:'bar',name:wh};
      }),
      {paper_bgcolor:'#0b0c10',plot_bgcolor:'#0b0c10',xaxis:{gridcolor:'#222831',tickformat:'%Y-%m-%d'},yaxis:{gridcolor:'#222831',title:'Оприходования ₽'},barmode:'group',margin:{t:10,r:10,b:40,l:60}},
      {displayModeBar:false,responsive:true}
    );
  }
}

// ---- SUMMARY helpers (multi-warehouse) ----
async function fetchSummary(start,end,group,whId){ // one warehouse
  const url=new URL('/api/summary',location.origin);
  url.searchParams.set('start',start); url.searchParams.set('end',end); url.searchParams.set('group',group||'day');
  if(whId) url.searchParams.set('warehouse_id',whId);
  return jget(url.toString());
}
function sumTotals(a,b){ // sums totals-like objects
  const out={}; for(const k of ['revenue','cost','discount','returns_cost','inflow_cost','receipts']){
    out[k]=(a?.[k]||0)+(b?.[k]||0);
  } return out;
}
function sumSeries(a,b){ // align by period and sum revenue
  const map=new Map();
  for(const r of (a||[])) map.set(r.period, {period:r.period, revenue:r.revenue||0});
  for(const r of (b||[])){
    const m = map.get(r.period) || {period:r.period, revenue:0};
    m.revenue += (r.revenue||0); map.set(r.period,m);
  }
  return [...map.values()].sort((x,y)=>x.period.localeCompare(y.period));
}
async function fetchSummaryTotalsMulti(start,end,group,whIds){
  if(!whIds || whIds.length===0) return fetchSummary(start,end,group,null);
  const arr=await Promise.all(whIds.map(id=>fetchSummary(start,end,group,id)));
  // reduce totals + compare
  const base = {totals:{}, compare:{previous:{}, previous_year:{}}};
  const out = arr.reduce((acc,cur)=>{
    acc.totals = sumTotals(acc.totals, cur.totals);
    acc.compare = {
      previous: sumTotals(acc.compare.previous, cur.compare?.previous),
      previous_year: sumTotals(acc.compare.previous_year, cur.compare?.previous_year),
    };
    // series суммировать для сравнительного графика
    acc.series = sumSeries(acc.series, cur.series);
    return acc;
  }, {...base, series:[]});
  return out;
}
async function fetchSummarySeriesMulti(start,end,group,whIds){
  const data=await fetchSummaryTotalsMulti(start,end,group,whIds);
  return (data.series||[]).map(r=>({period:r.period, revenue:r.revenue||0}));
}

// ---- writeoff sums (multi) from /api/writeoff/reasons ----
function isDefect(reason){
  if(!reason) return false;
  const s=String(reason).toLowerCase();
  return s.includes('брак');
}
function isInventory(reason){
  if(!reason) return false;
  const s=String(reason).toLowerCase();
  return s.includes('инвент') || s.includes('интвент') || s.includes('инвентар');
}
function sumWriteoffByBucket(rows, whIds, bucket){ // bucket: 'defect'|'inventory'
  const idsSet=new Set((whIds||[]).map(String));
  let sum=0;
  for(const r of rows){
    if(idsSet.size && !idsSet.has(String(r.warehouse_id))) continue;
    const reason=r.reason||'';
    if(bucket==='defect' && isDefect(reason)) sum+= (r.cost||0);
    else if(bucket==='inventory' && isInventory(reason)) sum+= (r.cost||0);
  }
  return sum;
}

async function loadCompareChart(){
  const start=document.getElementById('start').value;
  const end=document.getElementById('end').value;
  const doPrev=document.getElementById('cmp-prev-period').checked;
  const doYoY=document.getElementById('cmp-prev-year').checked;

  const days=rangeDays(start,end);
  const nowSeries=await fetchSummarySeries(start,end);
  const nowMap=Object.fromEntries(nowSeries.map(r=>[r.date,r.revenue]));
  const x=days.map((_,i)=>i+1);
  const nowY=days.map(d=>nowMap[d]??0);

  const traces=[{x,y:nowY,type:'scatter',mode:'lines+markers',name:'Текущий период'}];

  if(doPrev){
    const pp=prevPeriodRange(start,end);
    const prevSeries=await fetchSummarySeries(pp.start,pp.end);
    const prevMap=Object.fromEntries(prevSeries.map(r=>[r.date,r.revenue]));
    const prevDays=rangeDays(pp.start,pp.end);
    const prevY=prevDays.map(d=>prevMap[d]??0);
    traces.push({x,y:prevY,type:'scatter',mode:'lines',name:'Пред. период',line:{dash:'dot'}});
  }
  if(doYoY){
    const yy=prevYearRange(start,end);
    const yoySeries=await fetchSummarySeries(yy.start,yy.end);
    const yoyMap=Object.fromEntries(yoySeries.map(r=>[r.date,r.revenue]));
    const yoyDays=rangeDays(yy.start,yy.end);
    const yoyY=yoyDays.map(d=>yoyMap[d]??0);
    traces.push({x,y:yoyY,type:'scatter',mode:'lines',name:'Год назад',line:{dash:'dash'}});
  }

  Plotly.newPlot('chart-compare', traces, {
    paper_bgcolor:'#0b0c10', plot_bgcolor:'#0b0c10',
    xaxis:{gridcolor:'#222831', title:'День периода', dtick:1, rangemode:'tozero'},
    yaxis:{gridcolor:'#222831', title:'Выручка ₽'},
    margin:{t:10,r:10,b:40,l:60}, legend:{orientation:'h'}
  }, {displayModeBar:false, responsive:true});
}
  if(doYoY){
    const yy=prevYearRange(start,end);
    const yoySeries=await fetchSummarySeries(yy.start,yy.end);
    const yoyMap=Object.fromEntries(yoySeries.map(r=>[r.date,r.revenue]));
    const yoyDays=rangeDays(yy.start,yy.end);
    const yoyY=yoyDays.map(d=>yoyMap[d]??0);
    traces.push({x,y:yoyY,type:'scatter',mode:'lines',name:'Год назад',line:{dash:'dash'}});
  }

  Plotly.newPlot('chart-compare', traces, {
    paper_bgcolor:'#0b0c10', plot_bgcolor:'#0b0c10',
    xaxis:{gridcolor:'#222831', title:'День периода', dtick:1, rangemode:'tozero'},
    yaxis:{gridcolor:'#222831', title:'Выручка ₽'},
    margin:{t:10,r:10,b:40,l:60}, legend:{orientation:'h'}
  }, {displayModeBar:false, responsive:true});
}
  if(doYoY){
    const yy=prevYearRange(start,end);
    const yoySeries=await fetchSummarySeriesMulti(yy.start,yy.end,group,whIds);
    const yYoy=yoySeries.map(r=>r.revenue);
    traces.push({x:xNow,y:yYoy,type:'scatter',mode:'lines',name:'Год назад',line:{dash:'dash'}});
  }

  if(window.Plotly){
    const yTitle = 'Выручка ₽' + (group==='day'?' (по дням)': group==='month'?' (по месяцам)':' (итоги по годам)');
    Plotly.newPlot('chart-compare', traces, {
      paper_bgcolor:'#0b0c10', plot_bgcolor:'#0b0c10',
      xaxis:{gridcolor:'#222831', title:(group==='day'?'Дни':'Периоды')},
      yaxis:{gridcolor:'#222831', title:yTitle},
      margin:{t:10,r:10,b:40,l:60}, legend:{orientation:'h'}
    }, {displayModeBar:false, responsive:true});
  }
}

async function loadTopWarehouses(start,end){
  try{
    const res=await jget(`/api/top/warehouses?start=${start}&end=${end}`);
    const rows=res.data||[];
    const el=document.getElementById('top-warehouses'); if(!el) return;
    let html='<table><thead><tr><th>Склад</th><th>Выручка</th><th>GP</th><th>Маржа</th><th>Чеки</th><th>Ср. чек</th></tr></thead><tbody>';
    for(const r of rows){ html+=`<tr><td>${r.warehouse}</td><td>${fmt(r.revenue)} ₽</td><td>${fmt(r.gross_profit)} ₽</td><td>${(r.margin_pct||0).toFixed(1)} %</td><td>${(r.checks||0).toFixed(0)}</td><td>${fmt(r.avg_ticket||0)} ₽</td></tr>`; }
    html+='</tbody></table>'; el.innerHTML=html;
  }catch(e){ console.warn('top warehouses failed', e); }
}
async function loadTopProducts(start,end){
  try{
    const selected = getSelectedWarehouseIds();
    const whId = (selected.length===1) ? selected[0] : '';
    const url=new URL('/api/top/products',location.origin);
    url.searchParams.set('start',start); url.searchParams.set('end',end); if(whId) url.searchParams.set('warehouse_id',whId);
    const res=await jget(url.toString()); const rows=res.data||[];
    const el=document.getElementById('top-products'); if(!el) return;
    let html='<table><thead><tr><th>Товар</th><th>Выручка</th><th>GP</th><th>Маржа</th><th>Кол-во</th><th>Ср. цена</th></tr></thead><tbody>';
    for(const r of rows){ html+=`<tr><td>${r.name}</td><td>${fmt(r.revenue)} ₽</td><td>${fmt(r.gross_profit)} ₽</td><td>${(r.margin_pct||0).toFixed(1)} %</td><td>${(r.qty||0).toFixed(0)}</td><td>${fmt(r.avg_price||0)} ₽</td></tr>`; }
    html+='</tbody></table>'; el.innerHTML=html;
    const scope=document.getElementById('tp-scope'); if(scope) scope.textContent=(whId?('склад ID '+whId):(selected.length>1?'по выбранным складам':'по всем складам'));
  }catch(e){ console.warn('top products failed', e); }
}
    html+='</tbody></table>'; el.innerHTML=html;
    const scope=document.getElementById('tp-scope'); if(scope) scope.textContent=(whId?('склад ID '+whId):(selected.length>1?'по выбранным складам':'по всем складам'));
  }catch(e){ console.warn('top products failed', e); }
}
    html+='</tbody></table>'; el.innerHTML=html;
    const scope=document.getElementById('tp-scope'); if(scope) scope.textContent=(whId?('склад ID '+whId):(selected.length>1?'по выбранным складам':'по всем складам'));
  }catch(e){ console.warn('top products failed', e); }
}
    html+='</tbody></table>'; el.innerHTML=html;
    const scope=document.getElementById('tp-scope'); if(scope) scope.textContent=(whId?('склад ID '+whId): (selected.length>1?'по выбранным складам':'по всем складам'));
  }catch(e){ console.warn('top products failed', e); }
}

// reasons table (current period)
function ensureWriteoffContainers(){
  const grid=document.querySelector('.grid'); if(!grid) return;
  if(!document.getElementById('chart-writeoff')){
    const card=document.createElement('div');
    card.className='card col-12';
    card.innerHTML='<div class="muted">Списания по дням (дефект/инвентаризация/прочее) — стэк + линия Total</div><div id="chart-writeoff" style="height:380px"></div>';
    grid.appendChild(card);
  }
  if(!document.getElementById('writeoff-reasons')){
    const card=document.createElement('div');
    card.className='card col-12';
    card.innerHTML='<div class="muted">Списания по причинам (сумма и % от выручки за период)</div><div id="writeoff-reasons"></div>';
    grid.appendChild(card);
  }
}

async function loadWriteoffBlock(){
  const start=document.getElementById('start').value;
  const end=document.getElementById('end').value;
  const selected = getSelectedWarehouseIds();

  // daily
  const u1 = new URL('/api/writeoff/daily', location.origin);
  u1.searchParams.set('start', start); u1.searchParams.set('end', end);
  if(selected.length===1) u1.searchParams.set('warehouse_id', selected[0]);
  const res1 = await jget(u1.toString());
  const rows = res1.data||[];

  // reasons
  const u2 = new URL('/api/writeoff/reasons', location.origin);
  u2.searchParams.set('start', start); u2.searchParams.set('end', end);
  if(selected.length===1) u2.searchParams.set('warehouse_id', selected[0]);
  const res2 = await jget(u2.toString());
  const reasons = res2.data||[];

  if(!document.getElementById('chart-writeoff')){
    const c1=document.createElement('div'); c1.className='card col-12';
    c1.innerHTML = '<div class="muted">Списания по дням (₽) — total/defect/inventory/other</div><div id="chart-writeoff" style="height:380px"></div>';
    document.querySelector('.grid').appendChild(c1);
  }
  if(!document.getElementById('writeoff-reasons')){
    const c2=document.createElement('div'); c2.className='card col-12';
    c2.innerHTML = '<div class="muted">Списания по причинам (сумма за период)</div><div id="writeoff-reasons"></div>';
    document.querySelector('.grid').appendChild(c2);
  }

  // таблица причин
  let html='<table><thead><tr><th>Дата</th><th>Склад</th><th>Причина</th><th>Сумма</th></tr></thead><tbody>';
  for(const r of reasons){
    html += `<tr><td>${r.date}</td><td>${r.warehouse||r.warehouse_id||''}</td><td>${r.reason||''}</td><td>${fmt(r.cost||0)} ₽</td></tr>`;
  }
  html+='</tbody></table>';
  document.getElementById('writeoff-reasons').innerHTML=html;

  // график по дням (агрегация по дате)
  const byDate = {};
  for(const r of rows){
    const d=r.date;
    const obj = (byDate[d] ||= {total:0, defect:0, inventory:0, other:0});
    obj.total += r.total||0; obj.defect += r.defect||0; obj.inventory += r.inventory||0; obj.other += r.other||0;
  }
  const dates = Object.keys(byDate).sort();
  const arr = d=>dates.map(x=> (byDate[x][d]||0));
  const traces=[
    {x:dates, y:arr('total'), type:'scatter', mode:'lines+markers', name:'total'},
    {x:dates, y:arr('defect'), type:'bar', name:'defect', opacity:0.7},
    {x:dates, y:arr('inventory'), type:'bar', name:'inventory', opacity:0.7},
    {x:dates, y:arr('other'), type:'bar', name:'other', opacity:0.7},
  ];
  Plotly.newPlot('chart-writeoff', traces, {
    paper_bgcolor:'#0b0c10', plot_bgcolor:'#0b0c10',
    xaxis:{gridcolor:'#222831', tickformat:'%Y-%m-%d'},
    yaxis:{gridcolor:'#222831', title:'₽'},
    barmode:'group', margin:{t:10,r:10,b:40,l:60}
  }, {displayModeBar:false, responsive:true});
}
  if(!document.getElementById('writeoff-reasons')){
    const c2=document.createElement('div'); c2.className='card col-12';
    c2.innerHTML = '<div class="muted">Списания по причинам (сумма за период)</div><div id="writeoff-reasons"></div>';
    document.querySelector('.grid').appendChild(c2);
  }

  // таблица причин
  let html='<table><thead><tr><th>Дата</th><th>Склад</th><th>Причина</th><th>Сумма</th></tr></thead><tbody>';
  for(const r of reasons){
    html += `<tr><td>${r.date}</td><td>${r.warehouse||r.warehouse_id||''}</td><td>${r.reason||''}</td><td>${fmt(r.cost||0)} ₽</td></tr>`;
  }
  html+='</tbody></table>';
  document.getElementById('writeoff-reasons').innerHTML=html;

  // график по дням (агрегация по дате)
  const byDate = {};
  for(const r of rows){
    const d=r.date;
    const obj = (byDate[d] ||= {total:0, defect:0, inventory:0, other:0});
    obj.total += r.total||0; obj.defect += r.defect||0; obj.inventory += r.inventory||0; obj.other += r.other||0;
  }
  const dates = Object.keys(byDate).sort();
  const arr = d=>dates.map(x=> (byDate[x][d]||0));
  const traces=[
    {x:dates, y:arr('total'), type:'scatter', mode:'lines+markers', name:'total'},
    {x:dates, y:arr('defect'), type:'bar', name:'defect', opacity:0.7},
    {x:dates, y:arr('inventory'), type:'bar', name:'inventory', opacity:0.7},
    {x:dates, y:arr('other'), type:'bar', name:'other', opacity:0.7},
  ];
  Plotly.newPlot('chart-writeoff', traces, {
    paper_bgcolor:'#0b0c10', plot_bgcolor:'#0b0c10',
    xaxis:{gridcolor:'#222831', tickformat:'%Y-%m-%d'},
    yaxis:{gridcolor:'#222831', title:'₽'},
    barmode:'group', margin:{t:10,r:10,b:40,l:60}
  }, {displayModeBar:false, responsive:true});
}
  if(window.Plotly){
    const x=days, yDef=x.map(d=>mapByDate[d].defect), yInv=x.map(d=>mapByDate[d].inventory), yOth=x.map(d=>mapByDate[d].other), yTot=x.map(d=>mapByDate[d].total);
    Plotly.newPlot('chart-writeoff',[
      {x,y:yDef,type:'bar',name:'Дефект'},
      {x,y:yInv,type:'bar',name:'Инвентаризация'},
      {x,y:yOth,type:'bar',name:'Прочее'},
      {x,y:yTot,type:'scatter',mode:'lines+markers',name:'Всего',yaxis:'y2'}
    ],{
      paper_bgcolor:'#0b0c10',plot_bgcolor:'#0b0c10',
      xaxis:{gridcolor:'#222831',tickformat:'%Y-%m-%d'},
      yaxis:{gridcolor:'#222831',title:'Списания ₽',rangemode:'tozero'},
      yaxis2:{gridcolor:'#222831',title:'Всего ₽',overlaying:'y',side:'right'},
      barmode:'stack',margin:{t:10,r:60,b:40,l:60}
    },{displayModeBar:false,responsive:true});
  }

  // reasons -> table
  const reasonURL=new URL('/api/writeoff/reasons',location.origin);
  reasonURL.searchParams.set('start',start); reasonURL.searchParams.set('end',end);
  const reasonRows=(await jget(reasonURL.toString())).data||[];
  const reasonFiltered=reasonRows.filter(r=> selectedSet.has(String(r.warehouse_id)));
  const totalInPeriod=reasonFiltered.reduce((s,r)=>s+(r.cost||0),0);

  let revenueTotal=0;
  try{
    const sum=await fetchSummaryTotalsMulti(start,end,'day',selectedWhIds);
    revenueTotal=sum?.totals?.revenue||0;
  }catch(_) {}

  const aggr={};
  for(const r of reasonFiltered){ const k=r.reason||'(без причины)'; aggr[k]=(aggr[k]||0)+(r.cost||0); }
  const rows=Object.entries(aggr).sort((a,b)=>b[1]-a[1]).map(([reason,cost])=>{
    const pctW = totalInPeriod? (cost/totalInPeriod*100):0;
    const pctR = revenueTotal? (cost/revenueTotal*100):0;
    return {reason, cost, pctW, pctR};
  });

  let html='<table><thead><tr><th>Причина</th><th>Сумма ₽</th><th>% в списаниях</th><th>% от выручки</th></tr></thead><tbody>';
  for(const r of rows){ html+=`<tr><td>${r.reason}</td><td>${fmt(r.cost)}</td><td>${r.pctW.toFixed(1)} %</td><td>${r.pctR.toFixed(2)} %</td></tr>`; }
  if(rows.length===0) html+='<tr><td colspan="4" class="muted">Нет данных</td></tr>';
  html+='</tbody></table>';
  const box=document.getElementById('writeoff-reasons'); if(box) box.innerHTML=html;
}

async function loadComparison(){
  const start=document.getElementById('start').value;
  const end=document.getElementById('end').value;
  const group=document.getElementById('group').value;
  const selected = getSelectedWarehouseIds();

  // summary totals/compare
  const url=new URL('/api/summary',location.origin);
  url.searchParams.set('start',start); url.searchParams.set('end',end); url.searchParams.set('group',group);
  if(selected.length===1) url.searchParams.set('warehouse_id', selected[0]);
  const data=await jget(url.toString()); const t=data.totals||{}; const c=data.compare||{}; const prev=c.previous||{}, yoy=c.previous_year||{};
  const kpi=(r)=>({ rev:r.revenue||0, gp:(r.revenue||0)-(r.cost||0), mar:(r.revenue?(((r.revenue-(r.cost||0))/r.revenue*100)):0), at:(r.receipts?(r.revenue/r.receipts):0), chk:(r.receipts||0), });
  const cur=kpi(t), p=kpi(prev), y=kpi(yoy);
  document.getElementById('compare').textContent=`Период ${start} – ${end}${selected.length===1? ' • Склад ID '+selected[0] : (selected.length>1? ' • Выбрано складов: '+selected.length : '')} • Группировка: ${group}`;
  const rows=[ ['Выручка',cur.rev,p.rev,pct(cur.rev,p.rev),y.rev,pct(cur.rev,y.rev)],
               ['Валовая прибыль',cur.gp,p.gp,pct(cur.gp,p.gp),y.gp,pct(cur.gp,y.gp)],
               ['Маржа %',cur.mar,p.mar,cur.mar-p.mar,y.mar,cur.mar-y.mar],
               ['Средний чек',cur.at,p.at,pct(cur.at,p.at),y.at,pct(cur.at,y.at)],
               ['Количество чеков',cur.chk,p.chk,pct(cur.chk,p.chk),y.chk,pct(cur.chk,y.chk)], ];
  let html='<table><thead><tr><th>Метрика</th><th>Текущий</th><th>Предыдущий</th><th>Δ к пред.</th><th>Год назад</th><th>Δ к прошл. году</th></tr></thead><tbody>';
  for(const r of rows){
    const [name,curv,pv,d1,yv,d2]=r, d1c=cls(d1), d2c=cls(d2);
    const curFmt = name==='Маржа %'? curv.toFixed(1)+' %' : (name==='Количество чеков'? (curv||0).toFixed(0) : fmt(curv)+(name==='Средний чек'?' ₽':' ₽'));
    const pFmt   = name==='Маржа %'? (pv||0).toFixed(1)+' %' : (name==='Количество чеков'? (pv||0).toFixed(0) : fmt(pv||0)+(name==='Средний чек'?' ₽':' ₽'));
    const yFmt   = name==='Маржа %'? (yv||0).toFixed(1)+' %' : (name==='Количество чеков'? (yv||0).toFixed(0) : fmt(yv||0)+(name==='Средний чек'?' ₽':' ₽'));
    const d1Fmt  = name==='Маржа %'? (d1||0).toFixed(1)+' п.п.' : (isFinite(d1)? d1.toFixed(1)+' %':'—');
    const d2Fmt  = name==='Маржа %'? (d2||0).toFixed(1)+' п.п.' : (isFinite(d2)? d2.toFixed(1)+' %':'—');
    html+=`<tr><td>${name}</td><td>${curFmt}</td><td>${pFmt}</td><td class="${d1c}">${d1Fmt}</td><td>${yFmt}</td><td class="${d2c}">${d2Fmt}</td></tr>`;
  }
  html+='</tbody></table>'; document.getElementById('compare-table').innerHTML=html;

  await Promise.all([loadTopWarehouses(start,end), loadTopProducts(start,end)]);
  document.getElementById('tp-scope').textContent=(selected.length===1?('склад ID '+selected[0]):(selected.length>1?'по выбранным складам':'по всем складам'));

  await loadCompareChart();
  await loadWriteoffBlock();
}
  html+='</tbody></table>'; document.getElementById('compare-table').innerHTML=html;

  await Promise.all([loadTopWarehouses(start,end), loadTopProducts(start,end)]);
  document.getElementById('tp-scope').textContent=(selected.length===1?('склад ID '+selected[0]):(selected.length>1?'по выбранным складам':'по всем складам'));

  await loadCompareChart();
  await loadWriteoffBlock();
}
  html+='</tbody></table>';
  document.getElementById('compare-table').innerHTML=html;

  // ТОПы
  await Promise.all([loadTopWarehouses(start,end), loadTopProducts(start,end)]);
  // Сравнительный график
  await loadCompareChart();
  // Списания (график и причины)
  await loadWriteoffBlock();
}

function addChartToggles(){
  try{
    const grid=document.querySelector('.grid'); if(!grid) return;
    if(document.getElementById('chart-toggles')) return;
    const card=document.createElement('div');
    card.className='card col-12';
    card.id='chart-toggles';
    card.innerHTML = `
      <div style="display:flex;gap:12px;align-items:center;flex-wrap:wrap">
        <span class="muted">Показать графики:</span>
        <label><input type="checkbox" data-target="#chart-revenue" checked> Выручка</label>
        <label><input type="checkbox" data-target="#chart-margin" checked> Маржа/GP</label>
        <label><input type="checkbox" data-target="#chart-inflow" checked> Оприходования</label>
        <label><input type="checkbox" data-target="#chart-writeoff" checked> Списания</label>
      </div>`;
    grid.insertBefore(card, grid.firstChild);
    card.querySelectorAll('input[type=checkbox]').forEach(cb=>{
      cb.addEventListener('change',(e)=>{
        const sel=e.target.getAttribute('data-target');
        const el=document.querySelector(sel)?.closest('.card') || document.querySelector(sel);
        if(el) el.style.display=e.target.checked?'':'none';
      });
    });
  }catch(e){ console.debug('toggles failed', e); }
}

const loadComparisonDebounced = debounced(()=>loadComparison(), 250);

function wireQuickButtons(){
  const qs=(id)=>document.getElementById(id);
  qs('btn-cur-month')?.addEventListener('click', ()=>{ setPeriodCurrentMonth(); loadComparisonDebounced(); });
  qs('btn-prev-month')?.addEventListener('click', ()=>{ setPeriodPrevMonth(); loadComparisonDebounced(); });
  qs('btn-ytd')?.addEventListener('click', ()=>{ setPeriodYTD(); loadComparisonDebounced(); });
  qs('btn-prev-year')?.addEventListener('click', ()=>{ setPeriodPrevYear(); loadComparisonDebounced(); });
  qs('cmp-prev-period')?.addEventListener('change', loadCompareChart);
  qs('cmp-prev-year')?.addEventListener('change', loadCompareChart);
  qs('group')?.addEventListener('change', loadCompareChart);
  qs('apply')?.addEventListener('click', loadComparisonDebounced);
}

async function boot(){
  setPeriodCurrentMonth();
  await loadWarehouses();
  await loadChartsAndKPI();
  wireQuickButtons();
  await loadComparison();
  const apply=document.getElementById('apply'); if(apply) apply.addEventListener('click', loadComparison);
}
}
document.addEventListener('DOMContentLoaded', boot);
